{"text": "Write a function to find the minimum element in a max heap.", "code": "def find_min_in_max_heap(heap):\n    n = len(heap)\n    for i in range(n//2, n):\n        if i == n//2 or heap[i] < min_element:\n            min_element = heap[i]\n    return min_element"}
{"text": "Write a function to find the maximum product of three numbers in an array.", "code": "def maximum_product(nums):\n    nums.sort()\n    return max(nums[-1] * nums[-2] * nums[-3], nums[0] * nums[1] * nums[-1])"}
{"text": "Write a function to compute the factorial of a number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)"}
{"text": "Write a function to check if a string contains valid parentheses.", "code": "def is_valid_parentheses(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"}
{"text": "Write a function to find the majority element in an array.", "code": "def majority_element(arr):\n    count = 0\n    candidate = None\n    for num in arr:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    return candidate"}
{"text": "Write a function to find the median of two sorted arrays.", "code": "def find_median_sorted_arrays(nums1, nums2):\n    nums = sorted(nums1 + nums2)\n    n = len(nums)\n    if n % 2 == 0:\n        return (nums[n // 2 - 1] + nums[n // 2]) / 2\n    else:\n        return nums[n // 2]"}
{"text": "Write a function to find the most frequent element in an array.", "code": "def most_frequent_element(arr):\n    from collections import Counter\n    count = Counter(arr)\n    return count.most_common(1)[0][0]"}
{"text": "Write a function to find the longest word in a string.", "code": "def longest_word(s):\n    words = s.split()\n    return max(words, key=len)"}
{"text": "Write a function to check if a number is an Armstrong number.", "code": "def is_armstrong_number(n):\n    digits = list(map(int, str(n)))\n    power = len(digits)\n    return n == sum(digit ** power for digit in digits)"}
{"text": "Write a function to calculate the nth triangular number.", "code": "def triangular_number(n):\n    return n * (n + 1) // 2"}
{"text": "Write a function to perform insertion sort on an array.", "code": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr"}
{"text": "Write a function to compute the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b"}
{"text": "Write a function to merge two sorted arrays.", "code": "def merge_sorted_arrays(arr1, arr2):\n    return sorted(arr1 + arr2)"}
{"text": "Write a function to find the minimum value in a binary search tree.", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef find_min_bst(root):\n    current = root\n    while current.left is not None:\n        current = current.left\n    return current.val"}
{"text": "Write a function to find the most frequent character in a string.", "code": "def most_frequent_char(s):\n    from collections import Counter\n    count = Counter(s)\n    return count.most_common(1)[0][0]"}
{"text": "Write a function to merge intervals.", "code": "def merge_intervals(intervals):\n    if not intervals:\n        return []\n    intervals.sort(key=lambda x: x[0])\n    merged = [intervals[0]]\n    for current in intervals[1:]:\n        last = merged[-1]\n        if current[0] <= last[1]:\n            merged[-1] = (last[0], max(last[1], current[1]))\n        else:\n            merged.append(current)\n    return merged"}
{"text": "Write a function to find the kth smallest element in a matrix sorted row-wise and column-wise.", "code": "import heapq\n\ndef kth_smallest_in_matrix(matrix, k):\n    n = len(matrix)\n    min_heap = [(matrix[i][0], i, 0) for i in range(n)]\n    heapq.heapify(min_heap)\n    while k:\n        element, r, c = heapq.heappop(min_heap)\n        if c < n - 1:\n            heapq.heappush(min_heap, (matrix[r][c + 1], r, c + 1))\n        k -= 1\n    return element"}
{"text": "Write a function to find the Hamming distance between two integers.", "code": "def hamming_distance(x, y):\n    return bin(x ^ y).count('1')"}
{"text": "Write a function to reverse the digits of an integer.", "code": "def reverse_integer(x):\n    sign = -1 if x < 0 else 1\n    x *= sign\n    reversed_x = int(str(x)[::-1])\n    return sign * reversed_x if reversed_x < 2**31 else 0"}
{"text": "Write a function to find the maximum depth of a binary tree.", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef max_depth(root):\n    if not root:\n        return 0\n    left_depth = max_depth(root.left)\n    right_depth = max_depth(root.right)\n    return max(left_depth, right_depth) + 1"}
{"text": "Write a function to reverse a string.", "code": "def reverse_string(s):\n    return s[::-1]"}
{"text": "Write a function to implement Dijkstra's algorithm for shortest path.", "code": "import heapq\n\ndef dijkstra(graph, start):\n    pq = [(0, start)]\n    dist = {start: 0}\n    while pq:\n        current_distance, current_vertex = heapq.heappop(pq)\n        if current_distance > dist[current_vertex]:\n            continue\n        for neighbor, weight in graph[current_vertex].items():\n            distance = current_distance + weight\n            if distance < dist.get(neighbor, float('inf')):\n                dist[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    return dist"}
{"text": "Write a function to find the minimum number of coins needed to make a given amount.", "code": "def coin_change(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1"}
{"text": "Write a function to calculate the maximum profit from stock prices with at most one transaction.", "code": "def max_profit_one_transaction(prices):\n    min_price = float('inf')\n    max_profit = 0\n    for price in prices:\n        if price < min_price:\n            min_price = price\n        elif price - min_price > max_profit:\n            max_profit = price - min_price\n    return max_profit"}
{"text": "Write a function to find the diameter of a binary tree.", "code": "class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef diameter_of_binary_tree(root):\n    def depth(node):\n        nonlocal diameter\n        if not node:\n            return 0\n        left = depth(node.left)\n        right = depth(node.right)\n        diameter = max(diameter, left + right)\n        return max(left, right) + 1\n    diameter = 0\n    depth(root)\n    return diameter"}
{"text": "Write a function to find all unique triplets in an array that give the sum of zero.", "code": "def three_sum(nums):\n    nums.sort()\n    res = []\n    for i in range(len(nums) - 2):\n        if i > 0 and nums[i] == nums[i - 1]:\n            continue\n        l, r = i + 1, len(nums) - 1\n        while l < r:\n            s = nums[i] + nums[l] + nums[r]\n            if s < 0:\n                l += 1\n            elif s > 0:\n                r -= 1\n            else:\n                res.append((nums[i], nums[l], nums[r]))\n                while l < r and nums[l] == nums[l + 1]:\n                    l += 1\n                while l < r and nums[r] == nums[r - 1]:\n                    r -= 1\n                l += 1\n                r -= 1\n    return res"}
{"text": "Write a function to perform selection sort on an array.", "code": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr"}
{"text": "Write a function to flatten a nested list.", "code": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"text": "Write a function to check if a number is a happy number.", "code": "def is_happy_number(n):\n    def get_next(number):\n        return sum(int(x) ** 2 for x in str(number))\n    seen = set()\n    while n != 1 and n not in seen:\n        seen.add(n)\n        n = get_next(n)\n    return n == 1"}
{"text": "Write a function to find the longest path in a matrix.", "code": "def longest_path(matrix):\n    if not matrix or not matrix[0]:\n        return 0\n    n, m = len(matrix), len(matrix[0])\n    dp = [[-1]*m for _ in range(n)]\n    def dfs(i, j):\n        if dp[i][j] != -1:\n            return dp[i][j]\n        directions = [(0,1),(1,0),(0,-1),(-1,0)]\n        dp[i][j] = 1 + max([dfs(i+di,j+dj) for di,dj in directions if 0<=i+di<n and 0<=j+dj<m and matrix[i+di][j+dj] > matrix[i][j]], default=0)\n        return dp[i][j]\n    return max(dfs(i,j) for i in range(n) for j in range(m))"}
{"text": "Write a function to compute the digital root of a number.", "code": "def digital_root(n):\n    while n >= 10:\n        n = sum(int(d) for d in str(n))\n    return n"}
{"text": "Write a function to implement the Sieve of Eratosthenes.", "code": "def sieve_of_eratosthenes(n):\n    primes = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n    return [p for p in range(2, n + 1) if primes[p]]"}
{"text": "Write a function to convert a Roman numeral to an integer.", "code": "def roman_to_integer(s):\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total"}
{"text": "Write a function to check if a number is a palindrome.", "code": "def is_palindrome_number(x):\n    if x < 0:\n        return False\n    return str(x) == str(x)[::-1]"}
{"text": "Write a function to calculate the power of a number iteratively.", "code": "def iterative_power(x, n):\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result *= x\n        x *= x\n        n //= 2\n    return result"}
{"text": "Write a function to find the maximum element in an array.", "code": "def find_max(arr):\n    return max(arr)"}
{"text": "Write a function to find all permutations of a string.", "code": "def permute_string(s):\n    from itertools import permutations\n    return [''.join(p) for p in permutations(s)]"}
{"text": "Write a function to find the intersection of two linked lists.", "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef get_intersection_node(headA, headB):\n    nodes_in_B = set()\n    while headB:\n        nodes_in_B.add(headB)\n        headB = headB.next\n    while headA:\n        if headA in nodes_in_B:\n            return headA\n        headA = headA.next\n    return None"}
{"text": "Write a function to check if a string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]"}
{"text": "Write a function to check if a number is a perfect number.", "code": "def is_perfect_number(n):\n    if n <= 1:\n        return False\n    sum_divisors = 1\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n // i:\n                sum_divisors += n // i\n    return sum_divisors == n"}
{"text": "Write a function to find the mode of an array.", "code": "def find_mode(arr):\n    from collections import Counter\n    count = Counter(arr)\n    max_count = max(count.values())\n    return [k for k, v in count.items() if v == max_count]"}
{"text": "Write a function to rotate an array by k elements.", "code": "def rotate_array(arr, k):\n    k = k % len(arr)\n    return arr[-k:] + arr[:-k]"}
{"text": "Write a function to implement quicksort.", "code": "def quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)"}
{"text": "Write a function to generate all possible subsets of a set.", "code": "def generate_subsets(s):\n    subsets = [[]]\n    for elem in s:\n        subsets += [x + [elem] for x in subsets]\n    return subsets"}
{"text": "Write a function to perform matrix multiplication.", "code": "def matrix_multiplication(A, B):\n    result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                result[i][j] += A[i][k] * B[k][j]\n    return result"}
{"text": "Write a function to reverse a linked list.", "code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_list(head):\n    prev = None\n    current = head\n    while current:\n        next_node = current.next\n        current.next = prev\n        prev = current\n        current = next_node\n    return prev"}
{"text": "Write a function to count the number of inversions in an array.", "code": "def count_inversions(arr):\n    def merge_count_split_inv(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += (mid-i + 1)\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n    def merge_sort(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right)//2\n            inv_count += merge_sort(arr, temp_arr, left, mid)\n            inv_count += merge_sort(arr, temp_arr, mid + 1, right)\n            inv_count += merge_count_split_inv(arr, temp_arr, left, mid, right)\n        return inv_count\n    return merge_sort(arr, [0]*len(arr), 0, len(arr)-1)"}
{"text": "Write a function to check if two strings are anagrams.", "code": "def are_anagrams(s1, s2):\n    return sorted(s1) == sorted(s2)"}
{"text": "Write a function to find the length of the longest increasing subsequence in an array.", "code": "def longest_increasing_subsequence(arr):\n    if not arr:\n        return 0\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"}
{"text": "Write a function to find the longest increasing path in a matrix.", "code": "def longest_increasing_path(matrix):\n    if not matrix:\n        return 0\n    m, n = len(matrix), len(matrix[0])\n    dp = [[0]*n for _ in range(m)]\n    def dfs(i, j):\n        if not dp[i][j]:\n            val = matrix[i][j]\n            dp[i][j] = 1 + max(\n                dfs(i-1, j) if i and val > matrix[i-1][j] else 0,\n                dfs(i+1, j) if i < m-1 and val > matrix[i+1][j] else 0,\n                dfs(i, j-1) if j and val > matrix[i][j-1] else 0,\n                dfs(i, j+1) if j < n-1 and val > matrix[i][j+1] else 0)\n        return dp[i][j]\n    return max(dfs(i, j) for i in range(m) for j in range(n))"}
